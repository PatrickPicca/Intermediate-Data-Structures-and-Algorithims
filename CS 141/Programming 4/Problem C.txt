#include <iostream>
using namespace std;

int longestdecreasing(int theArray[], int n)
{
    //Creates an array to store the LDS value for every element of our passed in array of integers.
    int* lds = new int[n];
    int i, j, final = 0;
    //Sets all LDS values for every element of our array to 1, as every number has an LDS value of 1 for itself.
    for (i = 0; i < n; i++)
    {
        lds[i] = 1;
    }
    //'i' represents each element of our passed in array
    for (i = 1; i < n; i++)
    {
        //j represents all numbers before the current number being checked.
        for (j = 0; j < i; j++)
        {
            //If any given number 'i' is less than a previous number 'j' and 
            //the LDS value of the 'i' number is less than the LDS value of the 'j' number +1, 
            //that means we found a number that continues decreasing off of 'j'
            if ((theArray[i] < theArray[j]) && (lds[i] < (lds[j] + 1)))
            {
                lds[i] = lds[j] + 1;
            }
        }
    }
    //Sets our maxmimum return value to be the highest value within our LDS array.
    for (i = 0; i < n; i++)
    {
        if (final < lds[i])
        {
            final = lds[i];
        }
    }
    //Returns our final LDS value.
    return final;
}
int longestincreasing(int theArray[], int n)
{
    //Creates an array to store the LDS value for every element of our passed in array of integers.
    int* lis = new int[n];
    int i, j, final = 0;
    //Sets all LDS values for every element of our array to 1, as every number has an LDS value of 1 for itself.
    for (i = 0; i < n; i++)
    {
        lis[i] = 1;
    }
    //'i' represents each element of our passed in array
    for (i = 1; i < n; i++)
    {
        //j represents all numbers before the current number being checked.
        for (j = 0; j < i; j++)
        {
            //If any given number 'i' is less than a previous number 'j' and 
            //the LDS value of the 'i' number is less than the LDS value of the 'j' number +1, 
            //that means we found a number that continues increasing off of 'j'
            if ((theArray[i] > theArray[j]) && (lis[i] < (lis[j] + 1)))
            {
                lis[i] = lis[j] + 1;
            }
        }
    }
    //Sets our maxmimum return value to be the highest value within our LDS array.
    for (i = 0; i < n; i++)
    {
        if (final < lis[i])
        {
            final = lis[i];
        }
    }
    //Returns our final LDS value.
    return final;
}

int LUS(int theArray[], int n)
{
    int highest = 0;

    for (int i = 0; i < n; i++)
    {
        int* array1 = new int[i];
        int* array2 = new int[n - i];
        for (int x = 0; x < i; x++)
        {
            array1[x] = theArray[x];
        }
        for (int y = 0; (y + i) < n; y++)
        {
            array2[y] = theArray[y + i];
        }

        /*
        if (theArray[i] == 9)
        {
            cout << "Checking 9: " << endl;
            for (int x = 0; x < i; x++)
            {
                cout << array1[x] << " ";
            }
            cout << endl;
            for (int y = 0; (y + i) < n; y++)
            {
                cout << array2[y] << " ";
            }
            cout << endl;
        }*/

        int LHS = longestincreasing(array1, i);
        int RHS = longestdecreasing(array2, (n - i));

        //cout << "LHS of array of integers starting at: " << theArray[i] << " equals: " << LHS << endl;
        //cout << "RHS of array of integers starting at: " << theArray[i] << " equals: " << RHS << endl;

        if (i == 0)
            highest = (LHS + RHS);
        else if ((LHS + RHS) > highest)
        {
            highest = (LHS + RHS);
        }
    }
    return highest;
}


// Driver Code
int main()
{
    int size = 0;
    cin >> size;
    int* array = new int[size];
    for (int i = 0; i < size; i++)
    {
        cin >> array[i];
    }

    cout << LUS(array, size);


    //cout << longestincreasing(array, size);

    //cout << longestdecreasing(array, size);
    return 0;
}


